import React from 'react';
import { Invoice, DeliveryNote } from '@/services/api';

interface InvoiceExportProps {
  invoice: Invoice;
  deliveryNote?: DeliveryNote | null;
  onClose: () => void;
}

const InvoiceExport: React.FC<InvoiceExportProps> = ({
  invoice,
  deliveryNote,
  onClose,
}) => {
  const generatePDFContent = () => {
    // Mock line items for demonstration
    const mockLineItems = [
      { name: 'Brake Pads', quantity: 2, unit_price: 45.99, total_price: 91.98 },
      { name: 'Brake Fluid', quantity: 1, unit_price: 12.50, total_price: 12.50 },
      { name: 'Labor', quantity: 1, unit_price: 85.00, total_price: 85.00 },
    ];

    const content = `
INVOICE SUMMARY REPORT
Generated: ${new Date().toLocaleDateString()}

INVOICE DETAILS:
Invoice Number: ${invoice.invoice_number || 'N/A'}
Supplier: ${invoice.supplier_name || 'N/A'}
Date: ${invoice.invoice_date || 'N/A'}
Total Amount: Â£${invoice.total_amount?.toFixed(2) || '0.00'}
Status: ${invoice.status}
Confidence: ${invoice.confidence ? Math.round(invoice.confidence * 100) : 0}%

${deliveryNote ? `
DELIVERY NOTE MATCHED:
Delivery Note Number: ${deliveryNote.delivery_note_number || 'N/A'}
Delivery Date: ${deliveryNote.delivery_date || 'N/A'}
Delivery Note Amount: Â£${deliveryNote.total_amount?.toFixed(2) || '0.00'}

PRICE COMPARISON:
Invoice Amount: Â£${invoice.total_amount?.toFixed(2) || '0.00'}
Delivery Note Amount: Â£${deliveryNote.total_amount?.toFixed(2) || '0.00'}
Difference: Â£${Math.abs((invoice.total_amount || 0) - (deliveryNote.total_amount || 0)).toFixed(2)}
` : 'No delivery note matched'}

FLAGGED ISSUES:
${invoice.confidence && invoice.confidence < 0.7 ? 'â€¢ Low OCR confidence - may need manual review' : ''}
${deliveryNote && Math.abs((invoice.total_amount || 0) - (deliveryNote.total_amount || 0)) > 0.01 ? 'â€¢ Price mismatch detected with delivery note' : ''}
${!deliveryNote ? 'â€¢ No delivery note matched' : ''}

LINE ITEMS:
${mockLineItems.map(item => 
  `â€¢ ${item.name}: ${item.quantity} Ã— Â£${item.unit_price.toFixed(2)} = Â£${item.total_price.toFixed(2)}`
).join('\n')}

NOTES:
This report was automatically generated by Owlin.
For questions, contact your system administrator.
    `;
    
    return content;
  };

  const generateEmailTemplate = () => {
    const subject = `Invoice Query - ${invoice.invoice_number || 'Unknown'} - ${invoice.supplier_name || 'Unknown Supplier'}`;
    
    const body = `
Dear ${invoice.supplier_name || 'Supplier'},

I hope this email finds you well. I am writing regarding invoice ${invoice.invoice_number || 'N/A'} dated ${invoice.invoice_date || 'N/A'} for the amount of Â£${invoice.total_amount?.toFixed(2) || '0.00'}.

${deliveryNote ? `
We have received the corresponding delivery note ${deliveryNote.delivery_note_number || 'N/A'} dated ${deliveryNote.delivery_date || 'N/A'} for Â£${deliveryNote.total_amount?.toFixed(2) || '0.00'}.

There appears to be a discrepancy between the invoice and delivery note amounts:
- Invoice Amount: Â£${invoice.total_amount?.toFixed(2) || '0.00'}
- Delivery Note Amount: Â£${deliveryNote.total_amount?.toFixed(2) || '0.00'}
- Difference: Â£${Math.abs((invoice.total_amount || 0) - (deliveryNote.total_amount || 0)).toFixed(2)}

Could you please review this discrepancy and provide clarification or a credit note as appropriate?
` : `
We have not yet received a corresponding delivery note for this invoice. Could you please confirm when the delivery note will be provided?
`}

${invoice.confidence && invoice.confidence < 0.7 ? `
Note: Our system had difficulty reading some details from this invoice (confidence: ${Math.round(invoice.confidence * 100)}%). Please confirm the accuracy of the extracted information.
` : ''}

Please respond at your earliest convenience.

Best regards,
[Your Name]
[Your Company]
[Contact Information]
    `;
    
    return { subject, body };
  };

  const handleExportPDF = () => {
    const content = generatePDFContent();
    
    // Create a blob with the content
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    
    // Create a download link
    const a = document.createElement('a');
    a.href = url;
    a.download = `invoice-summary-${invoice.invoice_number || 'unknown'}-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    onClose();
  };

  const handleCopyEmailTemplate = () => {
    const { subject, body } = generateEmailTemplate();
    const emailContent = `Subject: ${subject}\n\n${body}`;
    
    navigator.clipboard.writeText(emailContent).then(() => {
      alert('Email template copied to clipboard!');
    }).catch(() => {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = emailContent;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      alert('Email template copied to clipboard!');
    });
    
    onClose();
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-2xl w-full max-h-[80vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <div>
            <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
              Export Invoice Summary
            </h2>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Generate PDF report or email template for invoice {invoice.invoice_number}
            </p>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* Invoice Summary */}
          <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
            <h3 className="text-sm font-medium text-gray-900 dark:text-gray-100 mb-3">
              Invoice Summary
            </h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-500 dark:text-gray-400">Invoice Number:</span>
                <span className="ml-2 font-medium text-gray-900 dark:text-gray-100">
                  {invoice.invoice_number || 'N/A'}
                </span>
              </div>
              <div>
                <span className="text-gray-500 dark:text-gray-400">Supplier:</span>
                <span className="ml-2 font-medium text-gray-900 dark:text-gray-100">
                  {invoice.supplier_name || 'N/A'}
                </span>
              </div>
              <div>
                <span className="text-gray-500 dark:text-gray-400">Date:</span>
                <span className="ml-2 font-medium text-gray-900 dark:text-gray-100">
                  {invoice.invoice_date || 'N/A'}
                </span>
              </div>
              <div>
                <span className="text-gray-500 dark:text-gray-400">Amount:</span>
                <span className="ml-2 font-medium text-gray-900 dark:text-gray-100">
                  Â£{invoice.total_amount?.toFixed(2) || '0.00'}
                </span>
              </div>
            </div>
          </div>

          {/* Export Options */}
          <div className="space-y-4">
            <h3 className="text-sm font-medium text-gray-900 dark:text-gray-100">
              Export Options
            </h3>
            
            {/* PDF Export */}
            <div className="border border-gray-200 dark:border-gray-600 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <h4 className="text-sm font-medium text-gray-900 dark:text-gray-100">
                    ðŸ“„ PDF Summary Report
                  </h4>
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                    Download a comprehensive PDF report with invoice details, flagged issues, and line items
                  </p>
                </div>
                <button
                  onClick={handleExportPDF}
                  className="px-4 py-2 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 transition-colors"
                >
                  Download PDF
                </button>
              </div>
            </div>

            {/* Email Template */}
            <div className="border border-gray-200 dark:border-gray-600 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <h4 className="text-sm font-medium text-gray-900 dark:text-gray-100">
                    ðŸ“§ Email Template
                  </h4>
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                    Copy a pre-formatted email template for supplier communication
                  </p>
                </div>
                <button
                  onClick={handleCopyEmailTemplate}
                  className="px-4 py-2 bg-green-600 text-white text-sm rounded hover:bg-green-700 transition-colors"
                >
                  Copy Template
                </button>
              </div>
            </div>
          </div>

          {/* Preview */}
          <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
            <h3 className="text-sm font-medium text-gray-900 dark:text-gray-100 mb-3">
              Preview
            </h3>
            <div className="bg-white dark:bg-gray-800 rounded border p-3 max-h-32 overflow-y-auto">
              <pre className="text-xs text-gray-700 dark:text-gray-300 whitespace-pre-wrap">
                {generatePDFContent().substring(0, 300)}...
              </pre>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="flex items-center justify-end p-6 border-t border-gray-200 dark:border-gray-700">
          <button
            onClick={onClose}
            className="px-4 py-2 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
};

export default InvoiceExport; 