name: CI Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  python-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pyright
        pip install -r requirements.txt
    
    - name: Run Pyright (0 high severity errors)
      run: |
        pyright backend/ --outputformat=text
        if [ $? -ne 0 ]; then
          echo "‚ùå Pyright found high severity errors"
          exit 1
        fi
    
    - name: Run pytest with coverage
      run: |
        pytest backend/tests/ --cov=backend --cov-report=xml --cov-report=term-missing
        coverage report --show-missing
    
    - name: Check coverage thresholds
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        
        # Get coverage percentages
        packages = root.findall('.//package')
        engine_coverage = 0
        pairing_coverage = 0
        
        for package in packages:
            name = package.get('name', '')
            if 'engine' in name:
                engine_coverage = float(package.get('line-rate', 0)) * 100
            elif 'pairing' in name or 'services' in name:
                pairing_coverage = float(package.get('line-rate', 0)) * 100
        
        print(f'Engine coverage: {engine_coverage:.1f}%')
        print(f'Pairing coverage: {pairing_coverage:.1f}%')
        
        if engine_coverage < 70:
            print('‚ùå Engine coverage below 70%')
            exit(1)
        
        if pairing_coverage < 60:
            print('‚ùå Pairing coverage below 60%')
            exit(1)
        
        print('‚úÖ Coverage thresholds met')
        "
    
    - name: Run migrations test
      run: |
        cd backend
        python -c "
        import tempfile
        import sqlite3
        from db_manager_unified import DatabaseManager
        
        # Test migrations on fresh database
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
            db_path = f.name
        
        try:
            db_manager = DatabaseManager(db_path)
            db_manager.run_migrations()
            print('‚úÖ Migrations applied successfully')
            
            # Test rollback (if supported)
            print('‚úÖ Migration test passed')
        except Exception as e:
            print(f'‚ùå Migration test failed: {e}')
            exit(1)
        finally:
            import os
            os.unlink(db_path)
        "

  typescript-checks:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run TypeScript check (0 errors)
      run: |
        npx tsc --noEmit
        if [ $? -ne 0 ]; then
          echo "‚ùå TypeScript compilation failed"
          exit 1
        fi
    
    - name: Run build
      run: |
        npm run build
        if [ $? -ne 0 ]; then
          echo "‚ùå Build failed"
          exit 1
        fi
    
    - name: Run lint
      run: |
        npm run lint
        if [ $? -ne 0 ]; then
          echo "‚ùå Linting failed"
          exit 1
        fi

  golden-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements.txt
    
    - name: Run golden tests
      run: |
        cd backend
        python ../tests/test_golden_cases.py
        if [ $? -ne 0 ]; then
          echo "‚ùå Golden tests failed"
          exit 1
        fi

  performance-benchmark:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements.txt
    
    - name: Run performance benchmark
      run: |
        cd backend
        python ../scripts/bench_engine.py --lines 300
        if [ $? -ne 0 ]; then
          echo "‚ùå Performance benchmark failed"
          exit 1
        fi

  integration-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements.txt
    
    - name: Run integration tests
      run: |
        cd backend
        python -m pytest tests/test_acceptance.py -v
        if [ $? -ne 0 ]; then
          echo "‚ùå Integration tests failed"
          exit 1
        fi

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan
      run: |
        # Basic security checks
        echo "üîí Running security checks..."
        
        # Check for hardcoded secrets
        if grep -r "password\|secret\|key" backend/ --include="*.py" | grep -v "test\|example"; then
          echo "‚ùå Potential hardcoded secrets found"
          exit 1
        fi
        
        # Check for SQL injection patterns
        if grep -r "f\".*SELECT\|f\".*INSERT\|f\".*UPDATE\|f\".*DELETE" backend/ --include="*.py"; then
          echo "‚ùå Potential SQL injection patterns found"
          exit 1
        fi
        
        echo "‚úÖ Security scan passed"

  final-gate:
    runs-on: ubuntu-latest
    needs: [python-tests, typescript-checks, golden-tests, performance-benchmark, integration-tests, security-scan]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Final validation
      run: |
        echo "üéâ ALL CI GATES PASSED!"
        echo "‚úÖ Python tests: PASS"
        echo "‚úÖ TypeScript checks: PASS"
        echo "‚úÖ Golden tests: PASS"
        echo "‚úÖ Performance benchmark: PASS"
        echo "‚úÖ Integration tests: PASS"
        echo "‚úÖ Security scan: PASS"
        echo ""
        echo "üöÄ Ready for deployment!" 