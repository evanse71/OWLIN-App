name: Owlin single-port verify
on: [push, pull_request]

jobs:
  # Dependencies drift check
  deps-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Check for dependency drift
        run: |
          pip freeze > requirements.current.txt
          if ! diff requirements.txt requirements.current.txt; then
            echo "❌ DEPENDENCY DRIFT DETECTED"
            echo "Run 'pip freeze > requirements.txt' to update"
            exit 1
          fi
          echo "✅ Dependencies locked"

  # UI build enforcement
  ui-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '18' }
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install
      - name: Build UI
        run: |
          cd frontend
          npm run build
      - name: Assert UI build exists
        run: |
          if [ ! -f "out/index.html" ]; then
            echo "❌ UI BUILD FAILED - out/index.html not found"
            exit 1
          fi
          echo "✅ UI build complete"

  # Windows verification
  verify-windows:
    runs-on: windows-latest
    needs: [deps-check, ui-build]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Copy UI build
        run: |
          mkdir -p out
          echo "<!DOCTYPE html><html><head><title>Owlin</title></head><body><h1>Owlin UI</h1></body></html>" > out/index.html
      - name: Run ruthless verification (Windows)
        run: |
          powershell -ExecutionPolicy Bypass -File .\verify_full_owlin.ps1
      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: windows-logs
          path: |
            *.log
            /tmp/owlin.*

  # Linux verification
  verify-linux:
    runs-on: ubuntu-latest
    needs: [deps-check, ui-build]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Copy UI build
        run: |
          mkdir -p out
          echo "<!DOCTYPE html><html><head><title>Owlin</title></head><body><h1>Owlin UI</h1></body></html>" > out/index.html
      - name: Make scripts executable
        run: chmod +x verify_full_owlin.sh scripts/start_single_port.sh
      - name: Run ruthless verification (Linux)
        run: ./verify_full_owlin.sh
      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: linux-logs
          path: |
            *.log
            /tmp/owlin.*

  # Stress burst testing
  stress-test:
    runs-on: ubuntu-latest
    needs: [deps-check, ui-build]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Copy UI build
        run: |
          mkdir -p out
          echo "<!DOCTYPE html><html><head><title>Owlin</title></head><body><h1>Owlin UI</h1></body></html>" > out/index.html
      - name: Start server
        run: |
          nohup python -m backend.final_single_port >/tmp/owlin.out 2>/tmp/owlin.err &
          sleep 5
      - name: Stress burst test
        run: |
          # 200 rapid requests to /api/health
          for i in {1..200}; do
            curl -fsS http://127.0.0.1:8001/api/health >/dev/null &
          done
          wait
          echo "✅ Stress burst complete"
      - name: Latency threshold test
        run: |
          # Measure p50 and p95 latency
          times=()
          for i in {1..100}; do
            start=$(date +%s%N)
            curl -fsS http://127.0.0.1:8001/api/health >/dev/null
            end=$(date +%s%N)
            duration=$(( (end - start) / 1000000 ))  # Convert to milliseconds
            times+=($duration)
          done
          
          # Sort times and calculate percentiles
          IFS=$'\n' sorted=($(sort -n <<<"${times[*]}"))
          unset IFS
          
          p50=${sorted[49]}  # 50th percentile
          p95=${sorted[94]}  # 95th percentile
          
          echo "P50 latency: ${p50}ms"
          echo "P95 latency: ${p95}ms"
          
          if [ $p50 -gt 50 ]; then
            echo "❌ P50 latency too high: ${p50}ms > 50ms"
            exit 1
          fi
          
          if [ $p95 -gt 150 ]; then
            echo "❌ P95 latency too high: ${p95}ms > 150ms"
            exit 1
          fi
          
          echo "✅ Latency thresholds met"
