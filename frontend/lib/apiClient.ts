/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Invoice
         * @description Upload and process invoice with robust error handling and fallback logic.
         */
        post: operations["upload_invoice_api_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Uploaded Files
         * @description List all uploaded files with their metadata.
         */
        get: operations["list_uploaded_files_api_files_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/{document_id}/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Preview File
         * @description Preview a specific uploaded file by document ID.
         */
        get: operations["preview_file_api_files__document_id__preview_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Health Check */
        get: operations["api_health_check_api_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/audit/last": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Last Audit
         * @description Development-only endpoint to inspect last upload audit.
         */
        get: operations["get_last_audit_api_audit_last_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/test-ocr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Ocr
         * @description Test OCR engine directly
         */
        get: operations["test_ocr_api_test_ocr_get"];
        put?: never;
        /**
         * Test Ocr
         * @description Test OCR processing on uploaded file.
         *
         *     Args:
         *         file: Uploaded file to process
         *
         *     Returns:
         *         OCR results with timing and confidence information
         */
        post: operations["test_ocr_api_test_ocr_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/upload/review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload For Review
         * @description Upload a PDF for smart processing and review.
         *     This endpoint can handle multi-invoice PDFs and intelligently split them.
         */
        post: operations["upload_for_review_api_upload_review_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/upload/confirm-splits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirm Document Splits
         * @description Confirm document splits and save to database.
         */
        post: operations["confirm_document_splits_api_upload_confirm_splits_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invoices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Invoices
         * @description Get all invoices with optional filtering.
         */
        get: operations["get_invoices_api_invoices__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invoices/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Invoice Summary
         * @description Get summary statistics for invoices.
         */
        get: operations["get_invoice_summary_api_invoices_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invoices/{invoice_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Invoice Detail
         * @description Get detailed invoice information with enhanced error handling.
         */
        get: operations["get_invoice_detail_api_invoices__invoice_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Invoice
         * @description Delete an invoice.
         */
        delete: operations["delete_invoice_api_invoices__invoice_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invoices/{invoice_id}/pair": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Pair Invoice With Delivery Note
         * @description Pair an invoice with a delivery note.
         */
        post: operations["pair_invoice_with_delivery_note_api_invoices__invoice_id__pair_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invoices/{invoice_id}/line-item/{row_idx}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Line Item
         * @description Update a single line item in an invoice
         */
        patch: operations["update_line_item_api_invoices__invoice_id__line_item__row_idx__patch"];
        trace?: never;
    };
    "/api/invoices/{invoice_id}/flags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Flags
         * @description Update flags for an invoice or specific line items
         */
        patch: operations["update_flags_api_invoices__invoice_id__flags_patch"];
        trace?: never;
    };
    "/api/invoices/{invoice_id}/signatures/extract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Extract Signatures
         * @description Extract signature regions for an invoice
         */
        post: operations["extract_signatures_api_invoices__invoice_id__signatures_extract_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invoices/{invoice_id}/verification-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Verification Status
         * @description Update the verification status of an invoice
         */
        patch: operations["update_verification_status_api_invoices__invoice_id__verification_status_patch"];
        trace?: never;
    };
    "/api/flagged-issues/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Flagged Issues
         * @description Get all flagged issues with their details.
         */
        get: operations["get_flagged_issues_api_flagged_issues__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flagged-issues/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Flagged Issues Summary
         * @description Get summary statistics for flagged issues.
         */
        get: operations["get_flagged_issues_summary_api_flagged_issues_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flagged-issues/{issue_id}/resolve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resolve Flagged Issue
         * @description Mark a flagged issue as resolved.
         */
        post: operations["resolve_flagged_issue_api_flagged_issues__issue_id__resolve_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flagged-issues/{issue_id}/escalate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post Escalate Issue */
        post: operations["post_escalate_issue_api_flagged_issues__issue_id__escalate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flagged-issues/{issue_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Flagged Issue Detail
         * @description Get detailed information for a specific flagged issue.
         */
        get: operations["get_flagged_issue_detail_api_flagged_issues__issue_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Patch Flagged Issue */
        patch: operations["patch_flagged_issue_api_flagged_issues__issue_id__patch"];
        trace?: never;
    };
    "/api/suppliers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Suppliers
         * @description Get all suppliers with their basic information.
         */
        get: operations["get_suppliers_api_suppliers__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suppliers/analytics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Supplier Analytics
         * @description Get comprehensive supplier analytics and performance metrics.
         */
        get: operations["get_supplier_analytics_api_suppliers_analytics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suppliers/{supplier_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Supplier Detail
         * @description Get detailed information for a specific supplier.
         */
        get: operations["get_supplier_detail_api_suppliers__supplier_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suppliers/{supplier_name}/performance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Supplier Performance
         * @description Get supplier performance metrics over time.
         */
        get: operations["get_supplier_performance_api_suppliers__supplier_name__performance_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suppliers/summary/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Suppliers Overview
         * @description Get overview statistics for all suppliers.
         */
        get: operations["get_suppliers_overview_api_suppliers_summary_overview_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suppliers/scorecard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Supplier Scorecard
         * @description Aggregated supplier scorecard metrics.
         *     Returns an array of objects with:
         *       supplier_id, supplier_name, total_invoices, match_rate, avg_invoice_confidence,
         *       total_flagged_issues, credit_value_pending, delivery_reliability_score, last_updated
         */
        get: operations["get_supplier_scorecard_api_suppliers_scorecard_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Dashboard Analytics
         * @description Get comprehensive dashboard analytics.
         */
        get: operations["get_dashboard_analytics_api_analytics_dashboard_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/trends": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Analytics Trends
         * @description Get trend data over a specified period.
         */
        get: operations["get_analytics_trends_api_analytics_trends_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/performance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get System Performance
         * @description Get system performance metrics.
         */
        get: operations["get_system_performance_api_analytics_performance_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get System Health
         * @description Get system health metrics.
         */
        get: operations["get_system_health_api_analytics_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/spend-summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Spend Summary
         * @description Total spend for a range with prior period delta.
         */
        get: operations["get_spend_summary_api_analytics_spend_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/spend-by-supplier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Spend By Supplier
         * @description Top suppliers by spend with 'other' bucket.
         */
        get: operations["get_spend_by_supplier_api_analytics_spend_by_supplier_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/match-rate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Match Rate
         * @description 3-Way match rate breakdown: Passed / Issues / Failed.
         */
        get: operations["get_match_rate_api_analytics_match_rate_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/issues-by-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Issues By Type
         * @description Issues by type based on invoice_line_items.flagged and source field if available.
         */
        get: operations["get_issues_by_type_api_analytics_issues_by_type_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/duplicates-summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Duplicates Summary
         * @description Count potential duplicate invoices and sum of blocked totals (beyond first occurrence).
         */
        get: operations["get_duplicates_summary_api_analytics_duplicates_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/unmatched-counts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Unmatched Counts
         * @description Counts of paired / needs review / unmatched based on invoice status fields.
         */
        get: operations["get_unmatched_counts_api_analytics_unmatched_counts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/low-ocr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Low Ocr Summary
         * @description Count invoices where OCR confidence is below threshold (0-1 or 0-100 tolerant).
         */
        get: operations["get_low_ocr_summary_api_analytics_low_ocr_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/volatile-products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Volatile Products
         * @description Top volatile products by price over rolling N days using coefficient of variation (std/mean).
         */
        get: operations["get_volatile_products_api_analytics_volatile_products_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/advanced-dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Advanced Dashboard Analytics
         * @description Get comprehensive advanced dashboard analytics with trends, performance, and insights.
         */
        get: operations["get_advanced_dashboard_analytics_api_analytics_advanced_dashboard_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/trends/advanced": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Advanced Trends
         * @description Get advanced trend analysis with forecasting and insights.
         */
        get: operations["get_advanced_trends_api_analytics_trends_advanced_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/performance/advanced": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Advanced Performance Metrics
         * @description Get advanced performance metrics with detailed analysis.
         */
        get: operations["get_advanced_performance_metrics_api_analytics_performance_advanced_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ocr/parse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Parse Document
         * @description Parse uploaded document using OCR with real-time parsing and structured results
         */
        post: operations["parse_document_api_ocr_parse_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ocr/parse_receipt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Parse Receipt Document
         * @description Parse uploaded receipt using OCR
         */
        post: operations["parse_receipt_document_api_ocr_parse_receipt_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ocr/parse-receipt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Parse Receipt Document Alias
         * @description Parse uploaded receipt using OCR (alias endpoint)
         */
        post: operations["parse_receipt_document_alias_api_ocr_parse_receipt_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ocr/classify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Classify Document
         * @description Classify document type and extract data using OCR.
         *     Returns document type (invoice, delivery_note, unknown) with confidence score.
         */
        post: operations["classify_document_api_ocr_classify_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ocr/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Ocr Status
         * @description Get OCR service status
         */
        get: operations["get_ocr_status_api_ocr_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ocr/check-duplicate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check Duplicate Document
         * @description Check if uploaded document is a duplicate of existing documents.
         *
         *     Args:
         *         file: Uploaded document file
         *         threshold: Similarity threshold for duplicate detection (0.0 to 1.0)
         *
         *     Returns:
         *         JSON response with duplicate detection results
         */
        post: operations["check_duplicate_document_api_ocr_check_duplicate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ocr/enhanced": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Parse Document Enhanced
         * @description Enhanced OCR processing using the improved pipeline with better preprocessing.
         *
         *     This endpoint uses the enhanced OCR pipeline which includes:
         *     - Advanced image preprocessing (deskew, noise reduction, thresholding)
         *     - Structured line item extraction
         *     - Confidence scoring with review flags
         *     - Better handling of rotated or poor quality documents
         */
        post: operations["parse_document_enhanced_api_ocr_enhanced_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/available": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Products
         * @description Get list of available products for forecasting.
         */
        get: operations["get_products_api_products_available_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/forecast/{item_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Product Forecast
         * @description Get price forecast for a specific product/item using real forecasting algorithm.
         *
         *     Args:
         *         item_name: Name of the product/item to forecast
         *         months_ahead: Number of months to forecast (default: 12)
         *
         *     Returns:
         *         Dictionary containing historic and forecast data with confidence bands
         */
        get: operations["get_product_forecast_api_products_forecast__item_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/forecast-ready/{item_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Forecast Readiness
         * @description Check if an item has sufficient data for reliable forecasting.
         *
         *     Args:
         *         item_name: Name of the product/item to check
         *
         *     Returns:
         *         Dictionary containing readiness status and diagnostic information
         */
        get: operations["check_forecast_readiness_api_products_forecast_ready__item_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/queue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Documents For Review
         * @description Get all documents that need review - now returns real invoice data
         */
        get: operations["get_documents_for_review_api_documents_queue_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Invoice Documents
         * @description Get all invoice documents for the frontend
         */
        get: operations["get_invoice_documents_api_documents_invoices_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/delivery-notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Delivery Note Documents
         * @description Get all delivery note documents for the frontend
         */
        get: operations["get_delivery_note_documents_api_documents_delivery_notes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Approve Document
         * @description Approve a document - update its status
         */
        post: operations["approve_document_api_documents_approve_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/escalate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Escalate Document
         * @description Escalate a document for manual review
         */
        post: operations["escalate_document_api_documents_escalate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{doc_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Document
         * @description Delete a document
         */
        delete: operations["delete_document_api_documents__doc_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agent/ask": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ask Agent
         * @description Handle agent questions from the frontend.
         *
         *     Args:
         *         user_prompt: User's natural language query
         *         user_id: Owlin user ID
         *         invoice_id: ID of the invoice they're viewing
         *         role: Role of the user (used for permissions and response type)
         *
         *     Returns:
         *         {
         *             "markdown": Agent's written reply (string),
         *             "actions": Optional structured actions (e.g. suggest_credit),
         *             "confidence": Confidence score (0–100),
         *             "entities": Extracted entities (suppliers, amounts, etc.),
         *             "urgency": Urgency level (low, medium, high)
         *         }
         */
        post: operations["ask_agent_api_agent_ask_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agent/ask-with-memory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ask Agent With Memory
         * @description Handle agent questions with conversation memory.
         *
         *     This endpoint includes conversation history for more contextual responses.
         */
        post: operations["ask_agent_with_memory_api_agent_ask_with_memory_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agent/specialized": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Specialized Agent Task
         * @description Handle specialized agent tasks like credit suggestions, email generation, etc.
         */
        post: operations["specialized_agent_task_api_agent_specialized_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agent/suggest-credit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Suggest Credit Endpoint
         * @description Convenience endpoint for credit suggestions.
         */
        post: operations["suggest_credit_endpoint_api_agent_suggest_credit_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agent/generate-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Email Endpoint
         * @description Convenience endpoint for email generation.
         */
        post: operations["generate_email_endpoint_api_agent_generate_email_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agent/escalate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Escalate Issue Endpoint
         * @description Convenience endpoint for issue escalation.
         */
        post: operations["escalate_issue_endpoint_api_agent_escalate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agent/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Agent Health Check
         * @description Health check endpoint for the agent service.
         */
        get: operations["agent_health_check_api_agent_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agent/capabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Agent Capabilities
         * @description Get information about agent capabilities and supported features.
         */
        get: operations["get_agent_capabilities_api_agent_capabilities_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/test-ocr/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Ocr Health
         * @description Health check for test OCR endpoint.
         */
        get: operations["test_ocr_health_api_test_ocr_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/delivery-notes/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload Delivery Notes */
        post: operations["upload_delivery_notes_api_delivery_notes_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/delivery-notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Delivery Notes */
        get: operations["list_delivery_notes_api_delivery_notes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/match/suggestions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Suggestions */
        get: operations["get_suggestions_api_match_suggestions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/match/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post Confirm */
        post: operations["post_confirm_api_match_confirm_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/match/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post Reject */
        post: operations["post_reject_api_match_reject_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/upload/enhanced": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Document Enhanced
         * @description Enhanced upload endpoint with adaptive processing and comprehensive error recovery
         *
         *     Args:
         *         file: Uploaded file
         *         parse_templates: Whether to parse invoice templates
         *         save_debug: Whether to save debug artifacts
         *         user_role: User role for role-based processing
         *
         *     Returns:
         *         UploadResponse with processing results
         */
        post: operations["upload_document_enhanced_api_upload_enhanced_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/upload/adaptive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Document Adaptive
         * @description Adaptive upload endpoint with progress tracking and timeout handling
         *
         *     Args:
         *         file: Uploaded file
         *         parse_templates: Whether to parse invoice templates
         *         save_debug: Whether to save debug artifacts
         *         user_role: User role for role-based processing
         *
         *     Returns:
         *         UploadResponse with processing results
         */
        post: operations["upload_document_adaptive_api_upload_adaptive_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/upload/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Batch Enhanced
         * @description Enhanced batch upload endpoint for multiple documents
         *
         *     Args:
         *         files: List of uploaded files
         *         parse_templates: Whether to parse invoice templates
         *         save_debug: Whether to save debug artifacts
         *         user_role: User role for role-based processing
         *
         *     Returns:
         *         Dictionary with batch processing results
         */
        post: operations["upload_batch_enhanced_api_upload_batch_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/upload/status/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Upload Status
         * @description Get processing status for a document
         *
         *     Args:
         *         document_id: Document ID
         *
         *     Returns:
         *         ProcessingStatus with current status
         */
        get: operations["get_upload_status_api_upload_status__document_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/upload/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Document
         * @description Delete a processed document
         *
         *     Args:
         *         document_id: Document ID
         *
         *     Returns:
         *         Success status
         */
        delete: operations["delete_document_api_upload__document_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/upload/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Upload Health Check
         * @description Health check for upload service
         *
         *     Returns:
         *         Health status
         */
        get: operations["upload_health_check_api_upload_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/matching/upload-pair": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload And Match Pair
         * @description Upload and immediately match an invoice with a delivery note
         *
         *     Args:
         *         invoice_file: Invoice document file
         *         delivery_file: Delivery note document file
         *         threshold: Matching threshold (0.0 to 1.0)
         *         normalize_descriptions: Whether to normalize descriptions
         *         save_debug: Whether to save debug artifacts
         *
         *     Returns:
         *         MatchingResponse with results
         */
        post: operations["upload_and_match_pair_api_matching_upload_pair_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/matching/pair-existing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Pair Existing Documents
         * @description Pair existing processed documents by ID
         *
         *     Args:
         *         request: PairingRequest with invoice_id and delivery_id
         *
         *     Returns:
         *         PairingResponse with results
         */
        post: operations["pair_existing_documents_api_matching_pair_existing_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/matching/suggestions/{matching_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Matching Suggestions
         * @description Get manual review suggestions for a matching result
         *
         *     Args:
         *         matching_id: ID of the matching result
         *
         *     Returns:
         *         Dictionary with suggestions
         */
        get: operations["get_matching_suggestions_api_matching_suggestions__matching_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/matching/validation/{matching_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validate Matching Result
         * @description Validate and analyze a matching result
         *
         *     Args:
         *         matching_id: ID of the matching result
         *
         *     Returns:
         *         Dictionary with validation metrics and recommendations
         */
        get: operations["validate_matching_result_api_matching_validation__matching_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/matching/status/{matching_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Matching Status
         * @description Get status of a matching operation
         *
         *     Args:
         *         matching_id: ID of the matching operation
         *
         *     Returns:
         *         Dictionary with status information
         */
        get: operations["get_matching_status_api_matching_status__matching_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/matching/{matching_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Matching Result
         * @description Delete a matching result
         *
         *     Args:
         *         matching_id: ID of the matching result to delete
         *
         *     Returns:
         *         Dictionary with deletion status
         */
        delete: operations["delete_matching_result_api_matching__matching_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/validation/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Upload File
         * @description Validate an uploaded file and optionally process it
         *
         *     This endpoint performs comprehensive validation including:
         *     - File type and size validation
         *     - Duplicate detection (invoice number and file hash)
         *     - Descriptive naming generation
         *     - Optional document processing and parsing
         */
        post: operations["validate_upload_file_api_validation_check_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/validation/check-duplicate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check Duplicate Invoice Endpoint
         * @description Check if an invoice number already exists in the database
         */
        post: operations["check_duplicate_invoice_endpoint_api_validation_check_duplicate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/validation/check-file-hash": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check Duplicate File Hash Endpoint
         * @description Check if a file with the same hash already exists in the database
         */
        post: operations["check_duplicate_file_hash_endpoint_api_validation_check_file_hash_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/validation/generate-name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Invoice Name Endpoint
         * @description Generate a descriptive name for an invoice
         */
        post: operations["generate_invoice_name_endpoint_api_validation_generate_name_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/validation/supported-formats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Supported Formats
         * @description Get list of supported file formats
         */
        get: operations["get_supported_formats_api_validation_supported_formats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/validation/quick-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Quick Validation Check
         * @description Perform a quick validation check without database queries
         */
        post: operations["quick_validation_check_api_validation_quick_check_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/validation/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Validation Status
         * @description Get validation system status and configuration
         */
        get: operations["get_validation_status_api_validation_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/insights/suppliers/{supplier_id}/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Summary */
        get: operations["get_summary_api_insights_suppliers__supplier_id__summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/insights/suppliers/{supplier_id}/timeseries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Timeseries */
        get: operations["get_timeseries_api_insights_suppliers__supplier_id__timeseries_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/insights/suppliers/{supplier_id}/alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Alerts */
        get: operations["get_alerts_api_insights_suppliers__supplier_id__alerts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/forecast/items/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Item Forecast */
        get: operations["get_item_forecast_api_forecast_items__item_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/forecast/aggregate/{scope_type}/{scope_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Aggregate Forecast */
        get: operations["get_aggregate_forecast_api_forecast_aggregate__scope_type___scope_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/budgets/guardrails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Guardrails */
        get: operations["get_guardrails_api_budgets_guardrails_get"];
        put?: never;
        /** Post Guardrail */
        post: operations["post_guardrail_api_budgets_guardrails_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/budgets/violations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Violations */
        get: operations["get_violations_api_budgets_violations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/recovery/integrity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Integrity
         * @description Check system integrity and return report.
         */
        get: operations["integrity_api_recovery_integrity_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/recovery/backups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Backups
         * @description List available backups.
         */
        get: operations["backups_api_recovery_backups_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/recovery/support-pack": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Support Pack
         * @description Create support pack for export.
         */
        post: operations["support_pack_api_recovery_support_pack_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/recovery/restore/dry-run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Restore Dry Run
         * @description Perform dry-run restore and return diff report.
         */
        post: operations["restore_dry_run_api_recovery_restore_dry_run_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/recovery/restore/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Restore Apply
         * @description Apply restore with conflict resolutions.
         */
        post: operations["restore_apply_api_recovery_restore_apply_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/recovery/license/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload License
         * @description Upload and verify license file.
         */
        post: operations["upload_license_api_recovery_license_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Login with email and create session.
         */
        post: operations["login_api_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Info
         * @description Get current user information.
         */
        get: operations["get_current_user_info_api_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Permissions
         * @description Get current user's permissions at current venue.
         */
        get: operations["get_my_permissions_api_auth_permissions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Roles
         * @description List all roles with their permissions.
         */
        get: operations["list_roles_api_roles_get"];
        put?: never;
        /**
         * Create Role
         * @description Create a new role.
         */
        post: operations["create_role_api_roles_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/roles/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Role
         * @description Update a role.
         */
        patch: operations["update_role_api_roles__role_id__patch"];
        trace?: never;
    };
    "/api/roles/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Permissions
         * @description List all available permissions.
         */
        get: operations["list_permissions_api_roles_permissions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Users
         * @description List all users.
         */
        get: operations["list_users_api_users_get"];
        put?: never;
        /**
         * Create User
         * @description Create a new user.
         */
        post: operations["create_user_api_users_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/venues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Venues
         * @description List all venues.
         */
        get: operations["list_venues_api_users_venues_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assignments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign Role
         * @description Assign a role to a user at a venue.
         */
        post: operations["assign_role_api_assignments_post"];
        /**
         * Unassign Role
         * @description Remove a role from a user at a venue.
         */
        delete: operations["unassign_role_api_assignments_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assignments/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Assignments
         * @description Get all role assignments for a user.
         */
        get: operations["get_user_assignments_api_assignments_user__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/updates/available": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Available Updates
         * @description List available update bundles.
         */
        get: operations["available_updates_api_updates_available_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/updates/verify/{bundle_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify Bundle
         * @description Verify a specific bundle (GM only).
         */
        post: operations["verify_bundle_api_updates_verify__bundle_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/updates/apply/{bundle_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Apply Update
         * @description Apply an update (GM only).
         */
        post: operations["apply_update_api_updates_apply__bundle_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/updates/rollback/{changelog_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rollback Update
         * @description Rollback to a previous version (GM only).
         */
        post: operations["rollback_update_api_updates_rollback__changelog_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/updates/changelog": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Changelog
         * @description Get changelog entries.
         */
        get: operations["get_changelog_api_updates_changelog_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gm/dashboard/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Dashboard Summary
         * @description Get dashboard summary for user's accessible venues.
         */
        get: operations["get_dashboard_summary_api_gm_dashboard_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gm/dashboard/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Dashboard Data
         * @description Refresh KPI data for specified venues.
         */
        post: operations["refresh_dashboard_data_api_gm_dashboard_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gm/dashboard/venues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Accessible Venues
         * @description Get list of venues accessible to current user.
         */
        get: operations["get_accessible_venues_api_gm_dashboard_venues_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gm/dashboard/kpis/{venue_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Venue Kpis
         * @description Get detailed KPIs for a specific venue.
         */
        get: operations["get_venue_kpis_api_gm_dashboard_kpis__venue_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dev/clear-documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Clear All Documents
         * @description Development-only endpoint to clear all document records from the database.
         *     This should only be accessible in development mode.
         */
        delete: operations["clear_all_documents_api_dev_clear_documents_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Invoices Contracts */
        get: operations["list_invoices_contracts_api_contracts_invoices_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts/delivery-notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Delivery Notes Contracts */
        get: operations["list_delivery_notes_contracts_api_contracts_delivery_notes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts/flagged-issues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Flagged Issues Contracts */
        get: operations["list_flagged_issues_contracts_api_contracts_flagged_issues_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts/suppliers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Suppliers Contracts */
        get: operations["list_suppliers_contracts_api_contracts_suppliers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Users Contracts */
        get: operations["list_users_contracts_api_contracts_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flagged-issues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Flagged Issues */
        get: operations["get_flagged_issues_api_flagged_issues_get"];
        put?: never;
        /** Post Flagged Issue */
        post: operations["post_flagged_issue_api_flagged_issues_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flagged-issues/group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post Group Issues */
        post: operations["post_group_issues_api_flagged_issues_group_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AgentRequest
         * @description Request model for agent questions.
         */
        AgentRequest: {
            /** User Prompt */
            user_prompt?: string | null;
            /** User Id */
            user_id: string;
            /** Invoice Id */
            invoice_id: string;
            /** Role */
            role: string;
        };
        /**
         * AgentResponse
         * @description Response model for agent answers.
         */
        AgentResponse: {
            /** Markdown */
            markdown: string;
            /**
             * Actions
             * @default []
             */
            actions: {
                [key: string]: unknown;
            }[];
            /**
             * Confidence
             * @default 0
             */
            confidence: number;
            /**
             * Entities
             * @default {}
             */
            entities: {
                [key: string]: unknown;
            };
            /**
             * Urgency
             * @default medium
             */
            urgency: string;
            /** Error */
            error?: string | null;
        };
        /** AggregateForecast */
        AggregateForecast: {
            /**
             * Scope Type
             * @enum {string}
             */
            scope_type: "supplier" | "category" | "site";
            /**
             * Scope Id
             * Format: uuid
             */
            scope_id: string;
            /** Horizon */
            horizon: number;
            /**
             * Model
             * @enum {string}
             */
            model: "SES" | "MA";
            /** Forecast */
            forecast: components["schemas"]["PricePoint"][];
            band: components["schemas"]["ForecastBand"];
        };
        /** AssignRoleRequest */
        AssignRoleRequest: {
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            /**
             * Role Id
             * Format: uuid
             */
            role_id: string;
            /**
             * Venue Id
             * Format: uuid
             */
            venue_id: string;
        };
        /** BackupEntry */
        BackupEntry: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Size Bytes */
            size_bytes: number;
            /** Checksum Sha256 */
            checksum_sha256: string;
            /** Path */
            path: string;
        };
        /** Body_check_duplicate_document_api_ocr_check_duplicate_post */
        Body_check_duplicate_document_api_ocr_check_duplicate_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_check_duplicate_file_hash_endpoint_api_validation_check_file_hash_post */
        Body_check_duplicate_file_hash_endpoint_api_validation_check_file_hash_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /**
             * Db Path
             * @default data/owlin.db
             */
            db_path: string;
        };
        /** Body_check_duplicate_invoice_endpoint_api_validation_check_duplicate_post */
        Body_check_duplicate_invoice_endpoint_api_validation_check_duplicate_post: {
            /** Invoice Number */
            invoice_number: string;
            /**
             * Db Path
             * @default data/owlin.db
             */
            db_path: string;
        };
        /** Body_classify_document_api_ocr_classify_post */
        Body_classify_document_api_ocr_classify_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_generate_invoice_name_endpoint_api_validation_generate_name_post */
        Body_generate_invoice_name_endpoint_api_validation_generate_name_post: {
            /** Supplier */
            supplier?: string | null;
            /** Date */
            date?: string | null;
            /** Invoice Number */
            invoice_number?: string | null;
        };
        /** Body_parse_document_api_ocr_parse_post */
        Body_parse_document_api_ocr_parse_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_parse_document_enhanced_api_ocr_enhanced_post */
        Body_parse_document_enhanced_api_ocr_enhanced_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_parse_receipt_document_alias_api_ocr_parse_receipt_post */
        Body_parse_receipt_document_alias_api_ocr_parse_receipt_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_parse_receipt_document_api_ocr_parse_receipt_post */
        Body_parse_receipt_document_api_ocr_parse_receipt_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_quick_validation_check_api_validation_quick_check_post */
        Body_quick_validation_check_api_validation_quick_check_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /**
             * Max File Size Mb
             * @default 50
             */
            max_file_size_mb: number;
        };
        /** Body_test_ocr_api_test_ocr_post */
        Body_test_ocr_api_test_ocr_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_upload_and_match_pair_api_matching_upload_pair_post */
        Body_upload_and_match_pair_api_matching_upload_pair_post: {
            /**
             * Invoice File
             * Format: binary
             */
            invoice_file: string;
            /**
             * Delivery File
             * Format: binary
             */
            delivery_file: string;
            /**
             * Threshold
             * @default 0.8
             */
            threshold: number;
            /**
             * Normalize Descriptions
             * @default true
             */
            normalize_descriptions: boolean;
            /**
             * Save Debug
             * @default false
             */
            save_debug: boolean;
        };
        /** Body_upload_batch_enhanced_api_upload_batch_post */
        Body_upload_batch_enhanced_api_upload_batch_post: {
            /** Files */
            files: string[];
            /**
             * Parse Templates
             * @default true
             */
            parse_templates: boolean;
            /**
             * Save Debug
             * @default false
             */
            save_debug: boolean;
            /** User Role */
            user_role?: string | null;
        };
        /** Body_upload_delivery_notes_api_delivery_notes_upload_post */
        Body_upload_delivery_notes_api_delivery_notes_upload_post: {
            /** Files */
            files: string[];
        };
        /** Body_upload_document_adaptive_api_upload_adaptive_post */
        Body_upload_document_adaptive_api_upload_adaptive_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /**
             * Parse Templates
             * @default true
             */
            parse_templates: boolean;
            /**
             * Save Debug
             * @default false
             */
            save_debug: boolean;
            /** User Role */
            user_role?: string | null;
        };
        /** Body_upload_document_enhanced_api_upload_enhanced_post */
        Body_upload_document_enhanced_api_upload_enhanced_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /**
             * Parse Templates
             * @default true
             */
            parse_templates: boolean;
            /**
             * Save Debug
             * @default false
             */
            save_debug: boolean;
            /** User Role */
            user_role?: string | null;
        };
        /** Body_upload_for_review_api_upload_review_post */
        Body_upload_for_review_api_upload_review_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_upload_invoice_api_upload_post */
        Body_upload_invoice_api_upload_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_upload_license_api_recovery_license_upload_post */
        Body_upload_license_api_recovery_license_upload_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_validate_upload_file_api_validation_check_post */
        Body_validate_upload_file_api_validation_check_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /**
             * Db Path
             * @default data/owlin.db
             */
            db_path: string;
            /**
             * Max File Size Mb
             * @default 50
             */
            max_file_size_mb: number;
            /**
             * Process Document
             * @default true
             */
            process_document: boolean;
            /**
             * Parse Templates
             * @default true
             */
            parse_templates: boolean;
            /**
             * Save Debug
             * @default false
             */
            save_debug: boolean;
        };
        /** BudgetGuardrail */
        BudgetGuardrail: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Scope Type
             * @enum {string}
             */
            scope_type: "item" | "supplier" | "category" | "site";
            /**
             * Scope Id
             * Format: uuid
             */
            scope_id: string;
            /**
             * Period Start
             * Format: date
             */
            period_start: string;
            /**
             * Period End
             * Format: date
             */
            period_end: string;
            /** Amount Pennies */
            amount_pennies: number;
            /** Hard Limit */
            hard_limit: boolean;
            /**
             * Created By
             * Format: uuid
             */
            created_by: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** BudgetViolation */
        BudgetViolation: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Guardrail Id
             * Format: uuid
             */
            guardrail_id: string;
            /**
             * Occurred At
             * Format: date-time
             */
            occurred_at: string;
            /** Projected Spend Pennies */
            projected_spend_pennies: number;
            /** Threshold Pennies */
            threshold_pennies: number;
            /** Severity */
            severity: number;
        };
        /** BudgetViolationsResponse */
        BudgetViolationsResponse: {
            /** Violations */
            violations: components["schemas"]["BudgetViolation"][];
        };
        /** ChangelogEntry */
        ChangelogEntry: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Version */
            version: string;
            /** Build */
            build: string;
            /**
             * Applied At
             * Format: date-time
             */
            applied_at: string;
            /**
             * Status
             * @enum {string}
             */
            status: "success" | "rollback" | "failed";
            /** Notes */
            notes?: string | null;
        };
        /** ConfirmSplitsRequest */
        ConfirmSplitsRequest: {
            /** File Name */
            file_name: string;
            /** Documents */
            documents: components["schemas"]["ConfirmedDocument"][];
        };
        /** ConfirmedDocument */
        ConfirmedDocument: {
            /** Id */
            id: string;
            /** Type */
            type: string;
            /** Supplier Name */
            supplier_name: string;
            /** Pages */
            pages: number[];
            metadata: components["schemas"]["DocumentMetadata"];
        };
        /** CreateIssueRequest */
        CreateIssueRequest: {
            /**
             * Invoice Id
             * Format: uuid
             */
            invoice_id: string;
            /** Supplier Id */
            supplier_id?: string | null;
            /** Type */
            type: string;
            /** Description */
            description: string;
            /** Severity */
            severity: string;
            /** User Id */
            user_id?: string | null;
        };
        /** CreateRoleRequest */
        CreateRoleRequest: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Permissions */
            permissions: string[];
        };
        /** CreateUserRequest */
        CreateUserRequest: {
            /** Email */
            email: string;
            /** Display Name */
            display_name: string;
        };
        /** DashboardSummary */
        DashboardSummary: {
            /** Period */
            period: string;
            /** Total Venues */
            total_venues: number;
            /** Total Invoices */
            total_invoices: number;
            /** Total Spend */
            total_spend: number;
            /** Avg Match Rate */
            avg_match_rate: number;
            /** Avg Confidence */
            avg_confidence: number;
            /** Total Issues */
            total_issues: number;
            /** Kpi Cards */
            kpi_cards: components["schemas"]["KpiCard"][];
            /** Venue Comparison */
            venue_comparison: components["schemas"]["VenueRow"][];
            /** Trends */
            trends: components["schemas"]["VenueSeries"][];
        };
        /** DeliveryNote */
        DeliveryNote: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Supplier Name */
            supplier_name: string | null;
            /** Note Number */
            note_number: string | null;
            /** Date */
            date: string | null;
            /**
             * Status
             * @enum {string}
             */
            status: "pending" | "parsed" | "matched" | "rejected";
            /** Ocr Confidence */
            ocr_confidence: number;
            /** Matched Invoice Id */
            matched_invoice_id: string | null;
            /** Items */
            items: components["schemas"]["DnLineItem"][];
        };
        /** DiffReport */
        "DiffReport-Input": {
            /**
             * Backup Id
             * Format: uuid
             */
            backup_id: string;
            /** Rows */
            rows: components["schemas"]["RowDiff"][];
            /** Summary */
            summary: {
                [key: string]: number;
            };
        };
        /** DiffReport */
        "DiffReport-Output": {
            /**
             * Backup Id
             * Format: uuid
             */
            backup_id: string;
            /** Rows */
            rows: components["schemas"]["RowDiff"][];
            /** Summary */
            summary: {
                [key: string]: number;
            };
        };
        /** DnLineItem */
        DnLineItem: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Description */
            description: string;
            /** Qty */
            qty: number;
            /** Unit Price Pennies */
            unit_price_pennies: number;
            /** Total Pennies */
            total_pennies: number;
            /** Uom */
            uom?: string | null;
            /** Sku */
            sku?: string | null;
        };
        /** DocumentMetadata */
        DocumentMetadata: {
            /** Invoice Date */
            invoice_date?: string | null;
            /** Delivery Date */
            delivery_date?: string | null;
            /** Total Amount */
            total_amount?: number | null;
            /** Invoice Number */
            invoice_number?: string | null;
            /** Delivery Note Number */
            delivery_note_number?: string | null;
        };
        /** EscalateIssueRequest */
        EscalateIssueRequest: {
            /** To Role */
            to_role: string;
            /** Note */
            note?: string | null;
            /**
             * Role
             * @default GM
             */
            role: string;
            /** User Id */
            user_id?: string | null;
        };
        /** FieldDiff */
        FieldDiff: {
            /** Column */
            column: string;
            /** Old */
            old?: string | null;
            /** New */
            new?: string | null;
            /**
             * Decision
             * @default use_new
             * @enum {string}
             */
            decision: "keep_old" | "use_new" | "manual";
        };
        /** FlaggedIssue */
        FlaggedIssue: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Invoice Id
             * Format: uuid
             */
            invoice_id: string;
            /**
             * Severity
             * @enum {string}
             */
            severity: "low" | "med" | "high";
            /**
             * Kind
             * @enum {string}
             */
            kind: "price_change" | "missing_item" | "overcharge" | "mismatch";
            /** Message */
            message: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Resolved At */
            resolved_at?: string | null;
        };
        /** ForecastBand */
        ForecastBand: {
            /** Lower */
            lower: number;
            /** Upper */
            upper: number;
            /**
             * Confidence
             * @default 80
             */
            confidence: number;
        };
        /** GroupIssuesRequest */
        GroupIssuesRequest: {
            /** Issue Ids */
            issue_ids: string[];
            /** Group Name */
            group_name: string;
            /** User Id */
            user_id?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** InsightAlert */
        InsightAlert: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Supplier Id
             * Format: uuid
             */
            supplier_id: string;
            /**
             * Occurred At
             * Format: date-time
             */
            occurred_at: string;
            /** Metric */
            metric: string;
            /** Severity */
            severity: number;
            /** Message */
            message: string;
            /** Delta Pct */
            delta_pct?: number | null;
        };
        /** InsightAlertsResponse */
        InsightAlertsResponse: {
            /**
             * Supplier Id
             * Format: uuid
             */
            supplier_id: string;
            /** Alerts */
            alerts: components["schemas"]["InsightAlert"][];
        };
        /** InsightBadge */
        InsightBadge: {
            /** Label */
            label: string;
            /** Value */
            value: string;
            /**
             * Tone
             * @enum {string}
             */
            tone: "neutral" | "ok" | "warn" | "error";
            /** Tooltip */
            tooltip?: string | null;
        };
        /** InsightSummary */
        InsightSummary: {
            /**
             * Supplier Id
             * Format: uuid
             */
            supplier_id: string;
            /**
             * Period Start
             * Format: date
             */
            period_start: string;
            /**
             * Period End
             * Format: date
             */
            period_end: string;
            /** Top Badges */
            top_badges: components["schemas"]["InsightBadge"][];
            /** Series */
            series: components["schemas"]["MetricSeries"][];
        };
        /** IntegrityReport */
        IntegrityReport: {
            /** Ok */
            ok: boolean;
            /** Reasons */
            reasons: string[];
            /** Db Version */
            db_version?: string | null;
            /** Last Backup At */
            last_backup_at?: string | null;
        };
        /** Invoice */
        Invoice: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Supplier Name */
            supplier_name: string;
            /** Invoice Number */
            invoice_number: string;
            /**
             * Invoice Date
             * Format: date
             */
            invoice_date: string;
            /** Total Amount Pennies */
            total_amount_pennies: number;
            /** Vat Amount Pennies */
            vat_amount_pennies: number;
            /**
             * Currency
             * @constant
             */
            currency: "GBP";
            /**
             * Status
             * @enum {string}
             */
            status: "pending" | "scanned" | "matched" | "flagged";
            /** Confidence */
            confidence: number;
            /** Line Items */
            line_items: components["schemas"]["LineItem"][];
            /** Delivery Note Id */
            delivery_note_id?: string | null;
        };
        /** ItemForecast */
        ItemForecast: {
            /**
             * Item Id
             * Format: uuid
             */
            item_id: string;
            /** Horizon */
            horizon: number;
            /**
             * Model
             * @enum {string}
             */
            model: "SES" | "MA";
            /** Alpha */
            alpha?: number | null;
            /** Points */
            points: components["schemas"]["PricePoint"][];
            /** Forecast */
            forecast: components["schemas"]["PricePoint"][];
            band: components["schemas"]["ForecastBand"];
        };
        /** KpiCard */
        KpiCard: {
            /** Title */
            title: string;
            /** Value */
            value: string;
            /** Delta */
            delta?: string | null;
            /**
             * Trend
             * @default neutral
             * @enum {string}
             */
            trend: "up" | "down" | "neutral";
            /**
             * Series
             * @default []
             */
            series: number[];
        };
        /** LineItem */
        LineItem: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Description */
            description: string;
            /** Qty */
            qty: number;
            /** Unit Price Pennies */
            unit_price_pennies: number;
            /** Total Pennies */
            total_pennies: number;
            /** Uom */
            uom?: string | null;
            /** Sku */
            sku?: string | null;
        };
        /** LoginRequest */
        LoginRequest: {
            /** Email */
            email: string;
        };
        /** MatchConfirmRequest */
        MatchConfirmRequest: {
            /**
             * Delivery Note Id
             * Format: uuid
             */
            delivery_note_id: string;
            /**
             * Invoice Id
             * Format: uuid
             */
            invoice_id: string;
        };
        /** MatchRejectRequest */
        MatchRejectRequest: {
            /**
             * Delivery Note Id
             * Format: uuid
             */
            delivery_note_id: string;
        };
        /** MatchingResponse */
        MatchingResponse: {
            /** Success */
            success: boolean;
            /** Message */
            message: string;
            /** Matching Id */
            matching_id?: string | null;
            /** Results */
            results?: {
                [key: string]: unknown;
            } | null;
            /** Error */
            error?: string | null;
        };
        /** MetricSeries */
        MetricSeries: {
            /**
             * Metric
             * @enum {string}
             */
            metric: "spend" | "price_volatility" | "on_time_rate" | "mismatch_rate" | "confidence_median";
            /**
             * Bucket
             * @enum {string}
             */
            bucket: "day" | "week" | "month";
            /** Points */
            points: components["schemas"]["TimeSeriesPoint"][];
        };
        /** OkResponse */
        OkResponse: {
            /** Ok */
            ok: boolean;
        };
        /** PairingRequest */
        PairingRequest: {
            /** Invoice Id */
            invoice_id: string;
            /** Delivery Id */
            delivery_id: string;
            /**
             * Threshold
             * @default 0.8
             */
            threshold: number;
        };
        /** PairingResponse */
        PairingResponse: {
            /** Success */
            success: boolean;
            /** Message */
            message: string;
            /** Pairing Id */
            pairing_id?: string | null;
            /** Results */
            results?: {
                [key: string]: unknown;
            } | null;
            /** Error */
            error?: string | null;
        };
        /** Permission */
        Permission: {
            /** Code */
            code: string;
            /** Description */
            description: string;
        };
        /** PricePoint */
        PricePoint: {
            /**
             * T
             * Format: date
             */
            t: string;
            /** P */
            p: number;
        };
        /**
         * ProcessingStatus
         * @description Processing status response
         */
        ProcessingStatus: {
            /** Status */
            status: string;
            /** Progress Percentage */
            progress_percentage: number;
            /** Current Step */
            current_step: string;
            /** Estimated Time Remaining */
            estimated_time_remaining: number;
            /** Details */
            details: {
                [key: string]: unknown;
            };
        };
        /** RefreshRequest */
        RefreshRequest: {
            /** Venue Ids */
            venue_ids?: string[] | null;
            /**
             * Force
             * @default false
             */
            force: boolean;
        };
        /** RestoreDryRunRequest */
        RestoreDryRunRequest: {
            /**
             * Backup Id
             * Format: uuid
             */
            backup_id: string;
        };
        /** RoleWithPerms */
        RoleWithPerms: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Permissions */
            permissions: components["schemas"]["Permission"][];
        };
        /** RowDiff */
        RowDiff: {
            /** Table */
            table: string;
            /** Pk */
            pk: string;
            /** Diffs */
            diffs: components["schemas"]["FieldDiff"][];
        };
        /** SeriesPoint */
        SeriesPoint: {
            /** Date */
            date: string;
            /** Value */
            value: number;
        };
        /** SessionInfo */
        SessionInfo: {
            /**
             * Session Id
             * Format: uuid
             */
            session_id: string;
            user: components["schemas"]["User"];
            /**
             * Expires At
             * Format: date-time
             */
            expires_at: string;
        };
        /**
         * SpecializedAgentRequest
         * @description Request model for specialized agent tasks.
         */
        SpecializedAgentRequest: {
            /** User Prompt */
            user_prompt: string;
            /** User Id */
            user_id: string;
            /** Invoice Id */
            invoice_id: string;
            /** Role */
            role: string;
            /** Task Type */
            task_type: string;
        };
        /** Supplier */
        Supplier: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
        };
        /** TimeSeriesPoint */
        TimeSeriesPoint: {
            /**
             * T
             * Format: date
             */
            t: string;
            /** V */
            v: number;
            /** N */
            n?: number | null;
        };
        /** UpdateBundle */
        UpdateBundle: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Filename */
            filename: string;
            /** Version */
            version: string;
            /** Build */
            build: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Description */
            description?: string | null;
            /**
             * Verified
             * @default pending
             * @enum {string}
             */
            verified: "pending" | "ok" | "failed";
            /** Reason */
            reason?: string | null;
        };
        /** UpdateIssueRequest */
        UpdateIssueRequest: {
            /** Status */
            status?: string | null;
            /** Description */
            description?: string | null;
            /**
             * Role
             * @default ShiftLead
             */
            role: string;
            /** User Id */
            user_id?: string | null;
        };
        /** UpdateRoleRequest */
        UpdateRoleRequest: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Permissions */
            permissions: string[];
            /**
             * Id
             * Format: uuid
             */
            id: string;
        };
        /** UploadDNResponse */
        UploadDNResponse: {
            /** Delivery Notes */
            delivery_notes: components["schemas"]["DeliveryNote"][];
        };
        /**
         * UploadResponse
         * @description Response model for upload endpoint
         */
        UploadResponse: {
            /** Success */
            success: boolean;
            /** Message */
            message: string;
            /** Document Id */
            document_id?: string | null;
            /** Processing Results */
            processing_results?: {
                [key: string]: unknown;
            } | null;
            /** Error */
            error?: string | null;
            /** Progress */
            progress?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * UploadValidationResponse
         * @description Response model for upload validation
         */
        UploadValidationResponse: {
            /** Success */
            success: boolean;
            validation: components["schemas"]["ValidationResponse"];
            /** Processing Results */
            processing_results?: {
                [key: string]: unknown;
            } | null;
            /** Error */
            error?: string | null;
        };
        /** User */
        User: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Email */
            email: string;
            /** Display Name */
            display_name: string;
            /** Is Active */
            is_active: boolean;
        };
        /** UserRoleAssignment */
        UserRoleAssignment: {
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            /**
             * Role Id
             * Format: uuid
             */
            role_id: string;
            /**
             * Venue Id
             * Format: uuid
             */
            venue_id: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * ValidationResponse
         * @description Response model for validation
         */
        ValidationResponse: {
            /** Allowed */
            allowed: boolean;
            /** Messages */
            messages: {
                [key: string]: string;
            };
            /** Validation Data */
            validation_data: {
                [key: string]: unknown;
            };
            /** Summary */
            summary: {
                [key: string]: unknown;
            };
            /** Metadata */
            metadata: {
                [key: string]: unknown;
            };
        };
        /** VenueRow */
        VenueRow: {
            /**
             * Venue Id
             * Format: uuid
             */
            venue_id: string;
            /** Venue Name */
            venue_name: string;
            /** Total Invoices */
            total_invoices: number;
            /** Total Spend */
            total_spend: number;
            /** Match Rate */
            match_rate: number;
            /** Avg Confidence */
            avg_confidence: number;
            /** Flagged Issues */
            flagged_issues: number;
            /** Delivery Reliability */
            delivery_reliability: number;
        };
        /** VenueSeries */
        VenueSeries: {
            /**
             * Venue Id
             * Format: uuid
             */
            venue_id: string;
            /** Venue Name */
            venue_name: string;
            /** Series */
            series: components["schemas"]["SeriesPoint"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    upload_invoice_api_upload_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_invoice_api_upload_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_uploaded_files_api_files_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    preview_file_api_files__document_id__preview_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_health_check_api_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_last_audit_api_audit_last_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    test_ocr_api_test_ocr_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    test_ocr_api_test_ocr_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_test_ocr_api_test_ocr_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_for_review_api_upload_review_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_for_review_api_upload_review_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    confirm_document_splits_api_upload_confirm_splits_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfirmSplitsRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_invoices_api_invoices__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_invoice_summary_api_invoices_summary_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_invoice_detail_api_invoices__invoice_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_invoice_api_invoices__invoice_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    pair_invoice_with_delivery_note_api_invoices__invoice_id__pair_post: {
        parameters: {
            query: {
                delivery_note_id: string;
            };
            header?: never;
            path: {
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_line_item_api_invoices__invoice_id__line_item__row_idx__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoice_id: string;
                row_idx: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_flags_api_invoices__invoice_id__flags_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    extract_signatures_api_invoices__invoice_id__signatures_extract_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_verification_status_api_invoices__invoice_id__verification_status_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_flagged_issues_api_flagged_issues__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_flagged_issues_summary_api_flagged_issues_summary_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    resolve_flagged_issue_api_flagged_issues__issue_id__resolve_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                issue_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_escalate_issue_api_flagged_issues__issue_id__escalate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                issue_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EscalateIssueRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_flagged_issue_detail_api_flagged_issues__issue_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                issue_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_flagged_issue_api_flagged_issues__issue_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                issue_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateIssueRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_suppliers_api_suppliers__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_supplier_analytics_api_suppliers_analytics_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_supplier_detail_api_suppliers__supplier_name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                supplier_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_supplier_performance_api_suppliers__supplier_name__performance_get: {
        parameters: {
            query?: {
                days?: number;
            };
            header?: never;
            path: {
                supplier_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_suppliers_overview_api_suppliers_summary_overview_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_supplier_scorecard_api_suppliers_scorecard_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_dashboard_analytics_api_analytics_dashboard_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_analytics_trends_api_analytics_trends_get: {
        parameters: {
            query?: {
                days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_system_performance_api_analytics_performance_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_system_health_api_analytics_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_spend_summary_api_analytics_spend_summary_get: {
        parameters: {
            query?: {
                start_date?: string | null;
                end_date?: string | null;
                venue?: string | null;
                supplier?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_spend_by_supplier_api_analytics_spend_by_supplier_get: {
        parameters: {
            query?: {
                start_date?: string | null;
                end_date?: string | null;
                venue?: string | null;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_match_rate_api_analytics_match_rate_get: {
        parameters: {
            query?: {
                start_date?: string | null;
                end_date?: string | null;
                venue?: string | null;
                supplier?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_issues_by_type_api_analytics_issues_by_type_get: {
        parameters: {
            query?: {
                start_date?: string | null;
                end_date?: string | null;
                venue?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_duplicates_summary_api_analytics_duplicates_summary_get: {
        parameters: {
            query?: {
                start_date?: string | null;
                end_date?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_unmatched_counts_api_analytics_unmatched_counts_get: {
        parameters: {
            query?: {
                start_date?: string | null;
                end_date?: string | null;
                venue?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_low_ocr_summary_api_analytics_low_ocr_get: {
        parameters: {
            query?: {
                threshold?: number;
                start_date?: string | null;
                end_date?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_volatile_products_api_analytics_volatile_products_get: {
        parameters: {
            query?: {
                days?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_advanced_dashboard_analytics_api_analytics_advanced_dashboard_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_advanced_trends_api_analytics_trends_advanced_get: {
        parameters: {
            query?: {
                days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_advanced_performance_metrics_api_analytics_performance_advanced_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    parse_document_api_ocr_parse_post: {
        parameters: {
            query?: {
                confidence_threshold?: number;
                debug?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_parse_document_api_ocr_parse_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    parse_receipt_document_api_ocr_parse_receipt_post: {
        parameters: {
            query?: {
                confidence_threshold?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_parse_receipt_document_api_ocr_parse_receipt_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    parse_receipt_document_alias_api_ocr_parse_receipt_post: {
        parameters: {
            query?: {
                confidence_threshold?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_parse_receipt_document_alias_api_ocr_parse_receipt_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    classify_document_api_ocr_classify_post: {
        parameters: {
            query?: {
                confidence_threshold?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_classify_document_api_ocr_classify_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ocr_status_api_ocr_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    check_duplicate_document_api_ocr_check_duplicate_post: {
        parameters: {
            query?: {
                threshold?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_check_duplicate_document_api_ocr_check_duplicate_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    parse_document_enhanced_api_ocr_enhanced_post: {
        parameters: {
            query?: {
                confidence_threshold?: number;
                debug?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_parse_document_enhanced_api_ocr_enhanced_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_products_api_products_available_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_product_forecast_api_products_forecast__item_name__get: {
        parameters: {
            query?: {
                months_ahead?: number;
            };
            header?: never;
            path: {
                item_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_forecast_readiness_api_products_forecast_ready__item_name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_documents_for_review_api_documents_queue_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_invoice_documents_api_documents_invoices_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_delivery_note_documents_api_documents_delivery_notes_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    approve_document_api_documents_approve_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    escalate_document_api_documents_escalate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_document_api_documents__doc_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                doc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ask_agent_api_agent_ask_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ask_agent_with_memory_api_agent_ask_with_memory_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    specialized_agent_task_api_agent_specialized_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SpecializedAgentRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    suggest_credit_endpoint_api_agent_suggest_credit_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_email_endpoint_api_agent_generate_email_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    escalate_issue_endpoint_api_agent_escalate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    agent_health_check_api_agent_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_agent_capabilities_api_agent_capabilities_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    test_ocr_health_api_test_ocr_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    upload_delivery_notes_api_delivery_notes_upload_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_delivery_notes_api_delivery_notes_upload_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadDNResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_delivery_notes_api_delivery_notes_get: {
        parameters: {
            query?: {
                status?: string | null;
                q?: string | null;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeliveryNote"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_suggestions_api_match_suggestions_get: {
        parameters: {
            query: {
                delivery_note_id: string;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_confirm_api_match_confirm_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MatchConfirmRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OkResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_reject_api_match_reject_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MatchRejectRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OkResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_document_enhanced_api_upload_enhanced_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_document_enhanced_api_upload_enhanced_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_document_adaptive_api_upload_adaptive_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_document_adaptive_api_upload_adaptive_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_batch_enhanced_api_upload_batch_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_batch_enhanced_api_upload_batch_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_upload_status_api_upload_status__document_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessingStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_document_api_upload__document_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_health_check_api_upload_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    upload_and_match_pair_api_matching_upload_pair_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_and_match_pair_api_matching_upload_pair_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MatchingResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    pair_existing_documents_api_matching_pair_existing_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PairingRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PairingResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_matching_suggestions_api_matching_suggestions__matching_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                matching_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_matching_result_api_matching_validation__matching_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                matching_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_matching_status_api_matching_status__matching_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                matching_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_matching_result_api_matching__matching_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                matching_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_upload_file_api_validation_check_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_validate_upload_file_api_validation_check_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadValidationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_duplicate_invoice_endpoint_api_validation_check_duplicate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_check_duplicate_invoice_endpoint_api_validation_check_duplicate_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_duplicate_file_hash_endpoint_api_validation_check_file_hash_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_check_duplicate_file_hash_endpoint_api_validation_check_file_hash_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_invoice_name_endpoint_api_validation_generate_name_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_generate_invoice_name_endpoint_api_validation_generate_name_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_supported_formats_api_validation_supported_formats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    quick_validation_check_api_validation_quick_check_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_quick_validation_check_api_validation_quick_check_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_validation_status_api_validation_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_summary_api_insights_suppliers__supplier_id__summary_get: {
        parameters: {
            query: {
                start: string;
                end: string;
                bucket?: string;
            };
            header?: never;
            path: {
                supplier_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InsightSummary"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_timeseries_api_insights_suppliers__supplier_id__timeseries_get: {
        parameters: {
            query: {
                metric?: string;
                start: string;
                end: string;
                bucket?: string;
            };
            header?: never;
            path: {
                supplier_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricSeries"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_alerts_api_insights_suppliers__supplier_id__alerts_get: {
        parameters: {
            query: {
                start: string;
                end: string;
            };
            header?: never;
            path: {
                supplier_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InsightAlertsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_item_forecast_api_forecast_items__item_id__get: {
        parameters: {
            query?: {
                horizon?: number;
            };
            header?: never;
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemForecast"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_aggregate_forecast_api_forecast_aggregate__scope_type___scope_id__get: {
        parameters: {
            query?: {
                horizon?: number;
            };
            header?: never;
            path: {
                scope_type: string;
                scope_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AggregateForecast"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_guardrails_api_budgets_guardrails_get: {
        parameters: {
            query?: {
                scope_type?: string | null;
                scope_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BudgetGuardrail"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_guardrail_api_budgets_guardrails_post: {
        parameters: {
            query: {
                scope_type: string;
                scope_id: string;
                period_start: string;
                period_end: string;
                amount_pennies: number;
                hard_limit?: boolean;
                created_by?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BudgetGuardrail"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_violations_api_budgets_violations_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BudgetViolationsResponse"];
                };
            };
        };
    };
    integrity_api_recovery_integrity_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IntegrityReport"];
                };
            };
        };
    };
    backups_api_recovery_backups_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BackupEntry"][];
                };
            };
        };
    };
    support_pack_api_recovery_support_pack_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OkResponse"];
                };
            };
        };
    };
    restore_dry_run_api_recovery_restore_dry_run_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RestoreDryRunRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiffReport-Output"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    restore_apply_api_recovery_restore_apply_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DiffReport-Input"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OkResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_license_api_recovery_license_upload_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_license_api_recovery_license_upload_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_api_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionInfo"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_user_info_api_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    get_my_permissions_api_auth_permissions_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_roles_api_roles_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleWithPerms"][];
                };
            };
        };
    };
    create_role_api_roles_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRoleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleWithPerms"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_role_api_roles__role_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRoleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleWithPerms"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_permissions_api_roles_permissions_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_users_api_users_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"][];
                };
            };
        };
    };
    create_user_api_users_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_venues_api_users_venues_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    assign_role_api_assignments_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssignRoleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRoleAssignment"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unassign_role_api_assignments_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssignRoleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_assignments_api_assignments_user__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    available_updates_api_updates_available_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateBundle"][];
                };
            };
        };
    };
    verify_bundle_api_updates_verify__bundle_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                bundle_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateBundle"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    apply_update_api_updates_apply__bundle_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                bundle_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    rollback_update_api_updates_rollback__changelog_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                changelog_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_changelog_api_updates_changelog_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChangelogEntry"][];
                };
            };
        };
    };
    get_dashboard_summary_api_gm_dashboard_summary_get: {
        parameters: {
            query: {
                /** @description Start date (YYYY-MM-DD) */
                start: string;
                /** @description End date (YYYY-MM-DD) */
                end: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardSummary"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_dashboard_data_api_gm_dashboard_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_accessible_venues_api_gm_dashboard_venues_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_venue_kpis_api_gm_dashboard_kpis__venue_id__get: {
        parameters: {
            query: {
                /** @description Start date (YYYY-MM-DD) */
                start: string;
                /** @description End date (YYYY-MM-DD) */
                end: string;
            };
            header?: never;
            path: {
                venue_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    clear_all_documents_api_dev_clear_documents_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_invoices_contracts_api_contracts_invoices_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"][];
                };
            };
        };
    };
    list_delivery_notes_contracts_api_contracts_delivery_notes_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeliveryNote"][];
                };
            };
        };
    };
    list_flagged_issues_contracts_api_contracts_flagged_issues_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlaggedIssue"][];
                };
            };
        };
    };
    list_suppliers_contracts_api_contracts_suppliers_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Supplier"][];
                };
            };
        };
    };
    list_users_contracts_api_contracts_users_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"][];
                };
            };
        };
    };
    get_flagged_issues_api_flagged_issues_get: {
        parameters: {
            query?: {
                status?: string | null;
                supplier?: string | null;
                date_range?: string | null;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_flagged_issue_api_flagged_issues_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateIssueRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_group_issues_api_flagged_issues_group_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupIssuesRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
